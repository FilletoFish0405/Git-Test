# Planning Agent 详细架构规范文档
**Claude Code实现指南**

## 1. 概览与定位

### 1.1 系统定位

Planning Agent是研究自动化系统的**智能规划中枢**，负责将用户的模糊研究意图转化为具体的、可执行的多Agent协作计划。

**核心价值：**
- 🎯 **智能解析**：深度理解用户研究意图，识别隐含需求
- 📋 **动态规划**：根据研究类型和内容制定个性化执行计划
- 🤝 **协调优化**：设计最优的多Agent协作流程
- 🔍 **质量保证**：确保规划的科学性和可执行性

### 1.2 在整体系统中的作用

```
用户输入 → Planning Agent → 多Agent执行 → 最终产出
           ↑              ↓
        智能规划中枢    任务分发与协调
```

**输入：** 用户研究主题 + 附加信息文件
**输出：** 标准化的Agent任务规范 + 协调执行计划
**角色：** 系统的"大脑"和"指挥官"

---

## 2. 系统架构设计

### 2.1 整体架构模式

**架构类型：** 分层处理 + 工具编排模式
**设计原则：** 模块化、可扩展、可测试


### 2.2 核心架构组件

#### **2.2.1 Planning Agent Core**
- **IntentAnalyzer**: 用户意图理解和解析
- **StrategyPlanner**: 研究策略制定
- **TaskDecomposer**: 任务分解和分配
- **CoordinationManager**: 多Agent协调管理

#### **2.2.2 Tool Orchestration Layer**
- **ToolRegistry**: 工具注册和管理
- **ExecutionEngine**: 工具调用执行
- **ResultAggregator**: 结果聚合处理
- **QualityValidator**: 输出质量验证

#### **2.2.3 State Management**
- **PlanningContext**: 规划上下文状态
- **DecisionHistory**: 决策历史记录
- **KnowledgeBase**: 领域知识存储

### 2.3 处理流程架构

```
输入接收 → 意图分析 → 策略制定 → 任务分解 → 协调规划 → 输出生成
    ↓         ↓         ↓         ↓         ↓         ↓
  输入验证   领域识别   方法选择   Agent任务   工作流设计  质量验证
```

**关键特征：**
- **顺序处理**：每个阶段基于前一阶段的输出
- **工具驱动**：每个处理步骤通过专用工具实现
- **质量保证**：多个检查点确保输出质量
- **状态管理**：维护完整的规划上下文

---

## 3. 核心组件详解

### 3.1 IntentAnalyzer（意图分析器）

#### **职责范围**
- 解析用户输入的研究主题和附加文件
- 提取核心研究问题和目标
- 识别隐含假设和模糊点
- 确定研究类型和领域背景

#### **核心能力**
- **语义理解**：深度理解研究术语和概念
- **上下文推理**：从有限信息推导完整需求
- **歧义解决**：识别并标记需要澄清的问题
- **领域映射**：将问题映射到具体研究领域

#### **处理逻辑**
1. **文本解析**：提取关键概念和术语
2. **文件分析**：解析附加文件中的约束和要求
3. **意图重构**：将模糊描述转化为明确问题
4. **假设识别**：推导用户的隐含期望

### 3.2 StrategyPlanner（策略规划器）

#### **职责范围**
- 基于研究意图制定整体研究策略
- 选择合适的研究方法和验证途径
- 设计实验框架和评估标准
- 评估研究风险和可行性

#### **核心能力**
- **方法论选择**：根据问题类型选择最佳研究方法
- **实验设计**：设计科学严谨的实验框架
- **风险评估**：识别潜在问题和缓解策略
- **标准设定**：定义成功标准和评估指标

#### **处理逻辑**
1. **策略映射**：将研究问题映射到合适策略
2. **方法选择**：选择最优研究方法组合
3. **框架设计**：创建实验和验证框架
4. **可行性检查**：评估策略的执行可行性

### 3.3 TaskDecomposer（任务分解器）

#### **职责范围**
- 将研究策略分解为Agent-specific任务
- 为每个下游Agent生成详细任务规范
- 定义Agent间的依赖关系和接口
- 优化任务分配和资源配置

#### **核心能力**
- **智能分解**：将复杂策略拆分为可执行任务
- **接口设计**：定义标准化的Agent任务接口
- **依赖分析**：识别任务间的依赖关系
- **负载均衡**：优化任务分配策略

#### **处理逻辑**
1. **任务识别**：从策略中提取具体任务
2. **Agent匹配**：将任务分配给合适的Agent
3. **接口定义**：设计标准化的任务接口
4. **依赖规划**：安排任务执行顺序

### 3.4 CoordinationManager（协调管理器）

#### **职责范围**
- 设计多Agent协作的执行流程
- 定义Agent间的通信和数据传递协议
- 设置质量检查点和失败恢复机制
- 监控和优化整体执行效率

#### **核心能力**
- **流程优化**：设计最优的执行序列
- **通信协议**：定义Agent间的通信标准
- **质量控制**：设置检查点和验证机制
- **故障处理**：设计失败恢复策略

#### **处理逻辑**
1. **序列规划**：设计最优执行顺序
2. **接口标准化**：定义通信协议
3. **检查点设置**：安排质量验证节点
4. **容错设计**：规划失败处理机制

---

## 4. 工具生态系统

### 4.1 工具分类架构

#### **4.1.1 意图分析工具集 (Intent Analysis Tools)**

**parse_research_intent**
- **功能**：深度解析用户的研究意图
- **输入**：研究主题文本 + 附加文件
- **输出**：结构化的研究意图对象
- **用法**：识别核心问题、目标、假设和约束

**extract_domain_context**
- **功能**：提取研究领域的背景信息
- **输入**：研究主题
- **输出**：领域上下文信息
- **用法**：确定研究领域、方法、数据集、评估标准

**identify_research_type**
- **功能**：识别研究的类型和性质
- **输入**：研究意图对象
- **输出**：研究类型分类
- **用法**：确定是探索性、验证性、比较性还是创新性研究

#### **4.1.2 策略制定工具集 (Strategy Planning Tools)**

**design_research_strategy**
- **功能**：制定整体研究策略和方法论
- **输入**：领域上下文 + 研究类型
- **输出**：完整的研究策略
- **用法**：选择研究路径、方法、阶段规划

**plan_validation_approach**
- **功能**：规划假设验证的方法和途径
- **输入**：研究目标列表
- **输出**：验证策略计划
- **用法**：设计实验、选择指标、统计方法

**create_experiment_framework**
- **功能**：创建实验执行的总体框架
- **输入**：研究策略
- **输出**：实验框架规范
- **用法**：定义实验层次、控制变量、评估方法

#### **4.1.3 任务规划工具集 (Task Planning Tools)**

**plan_literature_search**
- **功能**：为Search Agent规划文献搜索策略
- **输入**：研究策略
- **输出**：搜索任务规范
- **用法**：生成搜索关键词、范围、质量标准

**plan_implementation**
- **功能**：为Code Agent规划实验实施任务
- **输入**：实验框架
- **输出**：实现任务规范
- **用法**：定义实验配置、数据要求、可视化需求

**plan_writing_framework**
- **功能**：规划论文写作的结构和内容
- **输入**：研究策略 + 实验框架
- **输出**：写作框架规范
- **用法**：设计论文结构、贡献点、叙述逻辑


#### **4.2.1 工具注册系统**
```
ToolRegistry
├── tool_definitions/          # 工具定义文件
├── tool_validators/          # 工具验证器


#### **4.2.2 工具执行引擎**
- **调用管理**：统一的工具调用接口
- **参数验证**：输入参数的类型和范围验证
- **结果处理**：输出结果的标准化处理
- **错误恢复**：工具执行失败的恢复机制

#### **4.2.3 工具质量保证**
- **输入验证**：确保工具输入的完整性和有效性
- **输出检查**：验证工具输出的格式和质量
- **一致性验证**：检查工具间输出的一致性
- **性能监控**：监控工具执行的性能和可靠性

---

## 5. 数据流与接口

### 5.1 核心数据结构

#### **5.1.1 输入数据结构**

**UserInput**
```
- topic: string                    # 研究主题
- files: List[File]               # 附加文件
- preferences: Dict               # 用户偏好设置
- constraints: Dict               # 约束条件
```

**File**
```
- filename: string                # 文件名
- content: string                 # 文件内容
- type: string                    # 文件类型（md/csv/json等）
- metadata: Dict                  # 文件元数据
```

#### **5.1.2 中间数据结构**

**ResearchIntent**
```
- core_question: string           # 核心研究问题
- objectives: List[string]        # 研究目标
- assumptions: List[string]       # 隐含假设
- ambiguities: List[string]       # 模糊点
- research_type: ResearchType     # 研究类型
- domain_context: DomainContext   # 领域背景
```

**ResearchStrategy**
```
- approach: string                # 研究方法
- methodology: string             # 方法论
- phases: List[ResearchPhase]     # 研究阶段
- validation_plan: ValidationPlan # 验证计划
- success_criteria: List[string]  # 成功标准
- risk_factors: List[string]      # 风险因素
```

#### **5.1.3 输出数据结构**

**SearchAgentTask**
```
- topic: string                   # 搜索主题
- abstract: string                # 搜索摘要
- search_strategy: Dict           # 搜索策略
- quality_criteria: Dict          # 质量标准
- expected_insights: List[string] # 预期洞察
```

**CodeAgentTask**
```
- input_topic_for_figure_csv: Dict    # 实验配置
- experiment_specs: Dict              # 实验规格
- baseline_requirements: List[string] # 基线要求
- evaluation_framework: Dict          # 评估框架
- visualization_specs: List[string]   # 可视化要求
```


Planning Agent 重构计划（基于Nanocode架构）                                                                                                    │ │
│ │                                                                                                                                                │ │
│ │ 整体架构转型                                                                                                                                   │ │
│ │                                                                                                                                                │ │
│ │ 1. 核心组件重新设计                                                                                                                            │ │
│ │                                                                                                                                                │ │
│ │ - PlanningAgent: 主Agent类，管理整个规划流程                                                                                                   │ │
│ │ - Session: 会话管理，状态维护，日志记录                                                                                                        │ │
│ │ - ToolRegistry: 工具注册系统，管理所有规划工具                                                                                                 │ │
│ │ - LLM Interface: OpenAI/Claude客户端封装                                                                                                       │ │
│ │                                                                                                                                                │ │
│ │ 2. 工具系统重构（基于AgentToolDefine）                                                                                                         │ │
│ │                                                                                                                                                │ │
│ │ 意图分析工具                                                                                                                                   │ │
│ │                                                                                                                                                │ │
│ │ class AnalyzeResearchIntentTool(AgentToolDefine):                                                                                              │ │
│ │     # 使用LLM分析用户研究意图                                                                                                                  │ │
│ │     # 返回：核心问题、目标、研究类型、领域上下文                                                                                               │ │
│ │                                                                                                                                                │ │
│ │ 文献搜索规划工具                                                                                                                               │ │
│ │                                                                                                                                                │ │
│ │ class PlanLiteratureSearchTool(AgentToolDefine):                                                                                               │ │
│ │     # 为Search Agent生成详细的搜索任务                                                                                                         │ │
│ │     # 返回：搜索策略、关键词、质量标准                                                                                                         │ │
│ │                                                                                                                                                │ │
│ │ 实验规划工具                                                                                                                                   │ │
│ │                                                                                                                                                │ │
│ │ class PlanImplementationTool(AgentToolDefine):                                                                                                 │ │
│ │     # 为Code Agent生成实验实施任务                                                                                                             │ │
│ │     # 返回：实验配置、基线要求、评估框架                                                                                                       │ │
│ │                                                                                                                                                │ │
│ │ 3. 主要文件结构                                                                                                                                │ │
│ │                                                                                                                                                │ │
│ │ planning_agent/                                                                                                                                │ │
│ │ ├── __main__.py                 # CLI入口（参考nanocode）                                                                                      │ │
│ │ ├── core/                                                                                                                                      │ │
│ │ │   ├── session.py             # 会话管理                                                                                                      │ │
│ │ │   └── planning_agent.py      # 主Agent类                                                                                                     │ │
│ │ ├── llm/                                                                                                                                       │ │
│ │ │   ├── clients.py             # LLM客户端                                                                                                     │ │
│ │ │   └── openai_model.py        # OpenAI接口                                                                                                    │ │
│ │ ├── tools/                                                                                                                                     │ │
│ │ │   ├── base.py                # AgentToolDefine基类                                                                                           │ │
│ │ │   ├── registry.py            # ToolRegistry                                                                                                  │ │
│ │ │   ├── analyze_intent.py      # 意图分析工具                                                                                                  │ │
│ │ │   ├── plan_search.py         # 搜索规划工具                                                                                                  │ │
│ │ │   └── plan_implementation.py # 实验规划工具                                                                                                  │ │
│ │ ├── models.py                  # 数据结构（移除coordination_plan）                                                                             │ │
│ │ └── utils/                                                                                                                                     │ │
│ │     ├── logger.py                                                                                                                              │ │
│ │     └── prompts.py                                                                                                                             │ │
│ │                                                                                                                                                │ │
│ │ 4. 实施步骤                                                                                                                                    │ │
│ │                                                                                                                                                │ │
│ │ 步骤1: 基础架构搭建                                                                                                                            │ │
│ │                                                                                                                                                │ │
│ │ - 复制nanocode的核心组件（Session, ToolRegistry, AgentToolDefine）                                                                             │ │
│ │ - 适配Planning Agent的需求                                                                                                                     │ │
│ │ - 建立LLM客户端接口                                                                                                                            │ │
│ │                                                                                                                                                │ │
│ │ 步骤2: 工具实现                                                                                                                                │ │
│ │                                                                                                                                                │ │
│ │ - 实现3个核心规划工具，每个都继承AgentToolDefine                                                                                               │ │
│ │ - 工具使用LLM进行智能分析，而不是规则逻辑                                                                                                      │ │
│ │ - 定义标准化的function schemas                                                                                                                 │ │
│ │                                                                                                                                                │ │
│ │ 步骤3: 主Agent逻辑                                                                                                                             │ │
│ │                                                                                                                                                │ │
│ │ - 实现PlanningAgent类，参考NonInteractiveAgent                                                                                                 │ │
│ │ - 自主执行循环：LLM决定调用哪些工具                                                                                                            │ │
│ │ - 生成最终的Agent任务规范                                                                                                                      │ │
│ │                                                                                                                                                │ │
│ │ 步骤4: CLI界面                                                                                                                                 │ │
│ │                                                                                                                                                │ │
│ │ - 创建命令行入口，支持任务描述和文件输入                                                                                                       │ │
│ │ - Rich控制台输出，显示规划过程                                                                                                                 │ │
│ │ - 异步执行支持                                                                                                                                 │ │
│ │                                                                                                                                                │ │
│ │ 5. 关键特性                                                                                                                                    │ │
│ │                                                                                                                                                │ │
│ │ LLM驱动的智能规划                                                                                                                              │ │
│ │                                                                                                                                                │ │
│ │ - 让LLM决定规划策略，不是预编程逻辑                                                                                                            │ │
│ │ - 工具提供能力，LLM提供智能                                                                                                                    │ │
│ │                                                                                                                                                │ │
│ │ 简化输出结构                                                                                                                                   │ │
│ │                                                                                                                                                │ │
│ │ @dataclass                                                                                                                                     │ │
│ │ class AgentTaskSpecs:                                                                                                                          │ │
│ │     search_agent_task: Dict[str, Any]                                                                                                          │ │
│ │     code_agent_task: Dict[str, Any]                                                                                                            │ │
│ │     # 移除 coordination_plan                                                                                                                   │ │
│ │                                                                                                                                                │ │
│ │ 异步工具执行                                                                                                                                   │ │
│ │                                                                                                                                                │ │
│ │ - 所有工具操作都是异步的                                                                                                                       │ │
│ │ - 支持并发执行多个规划任务                                                                                                                     │ │
│ │                                                                                                                                                │ │
│ │ 完整的执行追踪                                                                                                                                 │ │
│ │                                                                                                                                                │ │
│ │ - 每个工具调用都有详细日志                                                                                                                     │ │
│ │ - 支持检查点和状态恢复                                                                                                                         │ │
│ │                                                                                                                                                │ │
│ │ 预期效果                                                                                                                                       │ │
│ │                                                                                                                                                │ │
│ │ - 更智能的研究规划能力（LLM驱动）                                                                                                              │ │
│ │ - 更好的可扩展性（标准化工具接口）                                                                                                             │ │
│ │ - 更清晰的架构（参考成熟的nanocode设计）                                                                                                       │ │
│ │ - 符合现代AI Agent最佳实践                                                      